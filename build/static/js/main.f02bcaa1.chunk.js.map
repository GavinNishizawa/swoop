{"version":3,"sources":["assets/swoop.png","TestComponent.bs.js","Point.js","Draw.js","Pen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","mystr","$$default","Props","React","undefined","Point","x","y","this","draw","ctx","width","height","points","getFrag","deltas","i","length","push","currentPoints","map","p","realLength","updatePoints","pts","start","newPts","counter","interval","setInterval","ind","newBouncePoints","newPoints","cur","xvalue","Math","trunc","reflectPointX","reflectPointY","newpointer","bounce","clearInterval","clearRect","lineWidth","beginPath","moveTo","lineTo","stroke","drawLoop","time","Pen","xs","ys","event","clientX","clientY","pointsLength","returnArray","index","App","props","pen","onStart","e","onMove","onStop","canvasEl","document","getElementById","getContext","canvasPos","getBoundingClientRect","len","getFragment","className","src","logo","alt","id","onPointerDown","onPointerMove","onPointerUp","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f02bcaa1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/swoop.a31528de.png\";","// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE\n\nimport * as React from \"react\";\n\nvar mystr = \"testing\";\n\nfunction TestComponent$default(Props) {\n  return React.createElement(\"div\", undefined, mystr);\n}\n\nvar $$default = TestComponent$default;\n\nexport {\n  mystr ,\n  $$default ,\n  $$default as default,\n  \n}\n/* react Not a pure module */\n","\nexport class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}","\nimport { Point } from './Point';\n\nexport function draw(ctx, width, height, points, getFrag){\n  // var canvas = document.getElementById('canvas');\n\n  let deltas = [];\n  for(let i = 0; i < points.length; i++) {\n    deltas.push( new Point(\n      points[i].x - points[0].x,\n      points[i].y - points[0].y,\n    ));\n  }\n\n  let currentPoints = points.map((p) => new Point(p.x, p.y));\n  let realLength = currentPoints.length;\n  let updatePoints = (pts, start=0) => {\n    let newPts = [];\n\n    for (let i = 0; i < realLength; i++) {\n      newPts.push(pts[i+start]);\n    }\n    for (let i = 0; i < realLength; i++) {\n      newPts.push( new Point(\n        pts[start + realLength - 1].x + deltas[i].x,\n        pts[start + realLength - 1].y + deltas[i].y,\n      ));\n    }\n    return newPts;\n  }\n  currentPoints = updatePoints(currentPoints);\n  // if(canvas.getContext){\n    // var ctx = canvas.getContext('2d');\n  let time = 1000;\n  let steps = 40;\n  let counter = 0;\n  let interval = setInterval(() => {\n    // Draw from 0 to length\n    // Each one length/2\n    // update [0,2*length]\n\n    let segmentLength = realLength/3;\n    let ind = counter % realLength;\n    // let ptStartInd = ind * tenth;\n    // Get points from ptStartInd to ptStartInd + tenth\n    let ptsToDraw = getFrag(ind, segmentLength, currentPoints);\n    let newBouncePoints = bounce(ptsToDraw, width, height);\n    if(newBouncePoints.length === 0){\n      clearInterval(interval);\n    } else {\n      drawLoop(ctx, newBouncePoints);\n    }\n    if (ind === realLength-1) {\n      currentPoints = updatePoints(currentPoints, realLength);\n      // clearInterval(interval);\n    }\n    counter++;\n  }, time/steps);\n  // }\n}\n\nfunction reflectPointX(cur, width){\n  var xvalue = cur.x % width;\n  var quotient = Math.trunc(cur.x/width);\n  if(quotient % 2 === 0){\n      return new Point(xvalue, cur.y);\n  }else{\n    return new Point(width - xvalue, cur.y);\n  }\n\n}\n\nfunction reflectPointY(cur, height){\n  if(cur.y > height || cur.y < 0){\n    return null;\n  }else{\n    return cur;\n  }\n}\n\nexport function bounce(points, width, height){\n  let newPoints = points.map((p) => reflectPointX(p, width));\n  newPoints = newPoints.map((p) => reflectPointY(p, height));\n\n  let newpointer = [];\n  for (var i = 0; i < newPoints.length; i++) {\n    if(newPoints[i] != null){\n      newpointer.push(newPoints[i]);\n    }\n  }\n  return newpointer;\n}\n\nexport function drawLoop(ctx, points){\n  ctx.clearRect(0,0,1500,600);\n  ctx.lineWidth = 3;\n  ctx.beginPath();\n  ctx.moveTo(points[0].x, points[0].y);\n  for (var i = 0; i < points.length; i++) {\n    ctx.lineTo(points[i].x, points[i].y);\n  }\n  ctx.stroke();\n}\n","\nexport class Pen {\n  constructor() {\n    this.xs = [];\n    this.ys = [];\n  }\n\n  onStart(event) {\n    let x = event.clientX;\n    let y = event.clientY;\n    this.xs = [x];\n    this.ys = [y];\n  }\n\n  onMove(event) {\n    let x =  event.clientX;\n    let y =  event.clientY;\n    // console.log(`move: ${x},${y}`)\n\n    this.xs.push(x);\n    this.ys.push(y);\n  }\n\n  // switch to new declaration\n  // getFragment(counter, length, points) {\n  getFragment(counter, length, points) {\n    let pointsLength = points.length;\n    let returnArray = [];\n    for (let i = counter; i < counter + length; i++){\n        var index = i;\n        if (returnArray.length < length){\n            if (i >= pointsLength){\n                index = i % pointsLength;\n            }\n            // console.log(\"index: \" + index);\n            returnArray.push(points[index]);\n        }\n    }\n    return returnArray;\n  }\n}\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport TestComponent from './TestComponent.bs';\nimport logo from './assets/swoop.png';\nimport { draw } from './Draw.js';\nimport { Pen } from './Pen';\nimport { Point } from './Point';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.pen = new Pen();\n    // let points = [10,20,30,40,50]\n    //   .map(v => new Point(v, v));\n    // for(let i = 0; i < 2*points.length; i++) {\n    //   console.log(this.pen.getFragment(i, 3, points));\n    // }\n\n    this.onStart = e => this.pen.onStart(e);\n    this.onMove = e => this.pen.onMove(e);\n    this.onStop = () => {\n      let canvasEl = document.getElementById('canvas');\n      if(canvasEl.getContext){\n        let ctx = canvasEl.getContext('2d');\n        let canvasPos = canvasEl.getBoundingClientRect();\n        let {xs, ys} = this.pen;\n        let len = xs.length < ys.length ? xs.length : ys.length;\n        let pts = [];\n        for(let i = 0; i < len; i++) {\n          pts.push(new Point(xs[i] - canvasPos.x, ys[i] - canvasPos.y));\n        }\n        draw(ctx, canvasEl.width, canvasEl.height, pts, this.pen.getFragment);\n      }\n      // console.log(this.pen);\n    };\n  }\n  componentDidMount() {\n    // let points = [\n    //   new Point(100, 10),\n    //   new Point(200, 20),\n    //   new Point(300, 30),\n    // ];\n    // draw(points);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <img className=\"App-logo\" src={logo} alt=\"swoop-logo\"/>\n          <canvas id='canvas' width=\"1200\" height=\"600\"\n            onPointerDown={this.onStart}\n            onPointerMove={this.onMove}\n            onPointerUp={this.onStop}\n          />\n          <TestComponent />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}